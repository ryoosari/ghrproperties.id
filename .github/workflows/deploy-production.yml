name: Deploy to Production Branch

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # Allows manual trigger from GitHub Actions tab

# Add permissions to allow the workflow to commit and push
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    # Use pre-exported snapshot data for production build
    - name: Verify snapshot data exists
      run: |
        if [ -d "data" ] && [ -f "data/property-index.json" ]; then
          echo "✅ Snapshot data found. Using existing snapshots for build."
          
          # Show exported data summary
          if [ -f "data/metadata.json" ]; then
            echo "📊 Data export summary:"
            cat data/metadata.json
          fi
        else
          echo "⚠️ Warning: No snapshot data found. Creating empty snapshots..."
          mkdir -p data/properties data/snapshot
          
          # Create empty processed-properties.json
          echo "[]" > data/processed-properties.json
          
          # Create empty property-index.json
          echo "[]" > data/property-index.json
          
          # Create empty properties.json
          echo "[]" > data/properties.json
          
          # Create metadata.json with current timestamp
          echo "{\"exportedAt\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"stats\": {\"properties\": 0}, \"source\": \"fallback\"}" > data/metadata.json
          
          # Create last-updated.json
          echo "{\"lastUpdated\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > data/last-updated.json
        fi

    - name: Build Next.js static export with snapshot data
      env:
        NEXT_PUBLIC_STATIC_EXPORT: 'true'
      run: |
        echo "🛠️ Building static export with pre-exported data..."
        # Make sure the processed-properties.json file exists and is not empty
        if [ -f "data/processed-properties.json" ] && [ -s "data/processed-properties.json" ]; then
          echo "✅ Found property data, proceeding with build"
        else
          echo "⚠️ Warning: property data missing or empty, build may fail"
          echo "[] " > data/processed-properties.json
        fi
        
        # Make sure permissions are correct
        chmod +x scripts/fix-permissions.sh
        ./scripts/fix-permissions.sh
        
        npm run build
        
        echo "✅ Build completed"

    - name: Copy .htaccess to build output
      run: |
        if [ -f ".htaccess" ]; then
          cp .htaccess out/
          echo "Copied .htaccess to out directory"
          # Verify the file was actually copied
          if [ -f "out/.htaccess" ]; then
            echo "✅ Verified .htaccess exists in output directory"
            head -5 out/.htaccess
          else
            echo "⚠️ Failed to copy .htaccess to out directory"
            echo "Creating minimal .htaccess in out directory"
            echo "RewriteEngine On" > out/.htaccess
            echo "RewriteBase /" >> out/.htaccess
            echo "RewriteRule ^properties(/.*)?$ properties\$1.html [L]" >> out/.htaccess
            echo "RewriteCond %{REQUEST_FILENAME} !-f" >> out/.htaccess
            echo "RewriteCond %{REQUEST_FILENAME} !-d" >> out/.htaccess
            echo "RewriteRule . /index.html [L]" >> out/.htaccess
          fi
        else
          echo "No .htaccess file found in root, creating one in out directory"
          echo "RewriteEngine On" > out/.htaccess
          echo "RewriteBase /" >> out/.htaccess
          echo "RewriteRule ^properties(/.*)?$ properties\$1.html [L]" >> out/.htaccess
          echo "RewriteCond %{REQUEST_FILENAME} !-f" >> out/.htaccess
          echo "RewriteCond %{REQUEST_FILENAME} !-d" >> out/.htaccess
          echo "RewriteRule . /index.html [L]" >> out/.htaccess
        fi
        
    - name: Add PHP fallback files
      run: |
        echo "Adding PHP fallback files for properties routes..."
        
        # Create properties.php fallback file
        echo '<?php
        // Fallback PHP handling for /properties URL
        // This file will serve the properties.html content when the rewrite rules fail
        
        // Define the path to the HTML file
        $html_file = __DIR__ . "/properties.html";
        
        // Check if the properties.html file exists
        if (file_exists($html_file)) {
            // Set the content type to HTML
            header("Content-Type: text/html");
            
            // Output the file contents
            readfile($html_file);
            exit;
        } else {
            // If the file does not exist, redirect to the homepage
            header("Location: /");
            exit;
        }
        ?>' > out/properties.php
        
        # Create properties directory and index.php
        mkdir -p out/properties
        echo '<?php
        // Fallback PHP handling for /properties/ directory
        // This file serves the properties.html content when the rewrite rules fail
        
        // Define the path to the HTML file
        $html_file = dirname(__DIR__) . "/properties.html";
        
        // Check if the properties.html file exists
        if (file_exists($html_file)) {
            // Set the content type to HTML
            header("Content-Type: text/html");
            
            // Output the file contents
            readfile($html_file);
            exit;
        } else {
            // If the file does not exist, redirect to the homepage
            header("Location: /");
            exit;
        }
        ?>' > out/properties/index.php
        
        # Add debug file
        echo '<?php
        // Debug script to show server information and file structure
        
        // Set error reporting
        error_reporting(E_ALL);
        ini_set("display_errors", 1);
        
        // Security check - simple password protection
        if (!isset($_GET["token"]) || $_GET["token"] !== "debug123") {
            header("HTTP/1.0 403 Forbidden");
            echo "Access denied. Please use correct debug token.";
            exit;
        }
        
        // Function to safely display file contents
        function safe_display_file($path) {
            if (file_exists($path)) {
                echo "<h3>Contents of " . htmlspecialchars($path) . ":</h3>";
                echo "<pre>";
                echo htmlspecialchars(file_get_contents($path));
                echo "</pre>";
            } else {
                echo "<p>File not found: " . htmlspecialchars($path) . "</p>";
            }
        }
        
        // Function to display directory contents
        function list_directory($dir) {
            if (is_dir($dir)) {
                echo "<h3>Contents of " . htmlspecialchars($dir) . ":</h3>";
                echo "<ul>";
                $files = scandir($dir);
                foreach ($files as $file) {
                    if ($file != "." && $file != "..") {
                        $path = $dir . "/" . $file;
                        $type = is_dir($path) ? "[DIR]" : "[FILE]";
                        $size = is_file($path) ? " - " . filesize($path) . " bytes" : "";
                        echo "<li>" . $type . " " . htmlspecialchars($file) . $size . "</li>";
                    }
                }
                echo "</ul>";
            } else {
                echo "<p>Directory not found: " . htmlspecialchars($dir) . "</p>";
            }
        }
        
        // HTML header
        echo "<!DOCTYPE html>
        <html>
        <head>
            <title>Site Debug Information</title>
            <style>
                body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
                h1, h2, h3 { color: #333; }
                pre { background: #f5f5f5; padding: 10px; overflow-x: auto; }
                .section { margin-bottom: 30px; border-bottom: 1px solid #eee; padding-bottom: 20px; }
            </style>
        </head>
        <body>
            <h1>Site Debug Information</h1>";
        
        // Server information
        echo "<div class=\"section\">
            <h2>Server Information</h2>
            <pre>";
        echo "Server Software: " . $_SERVER["SERVER_SOFTWARE"] . "\n";
        echo "PHP Version: " . phpversion() . "\n";
        echo "Document Root: " . $_SERVER["DOCUMENT_ROOT"] . "\n";
        echo "Current Script: " . $_SERVER["SCRIPT_FILENAME"] . "\n";
        echo "Request URI: " . $_SERVER["REQUEST_URI"] . "\n";
        echo "</pre>
        </div>";
        
        // Check htaccess
        echo "<div class=\"section\">
            <h2>Critical Files Check</h2>";
        safe_display_file(".htaccess");
        safe_display_file("properties.html");
        safe_display_file("properties.php");
        safe_display_file("properties/index.php");
        echo "</div>";
        
        // Directory listings
        echo "<div class=\"section\">
            <h2>Directory Structure</h2>";
        list_directory(".");
        list_directory("properties");
        echo "</div>";
        
        // HTML footer
        echo "</body>
        </html>";
        ?>' > out/debug.php
        
        echo "✅ PHP fallback files added successfully"
    
    # Prepare API files for deployment
    - name: Create API directory
      run: mkdir -p api
      
    - name: Create config.php with placeholders
      run: |
        echo '<?php
        // Prevent direct access to this file
        if (count(get_included_files()) == 1) {
            // This file was accessed directly
            exit("Access denied");
        }
        
        // Database connection information
        // Values are injected from GitHub Secrets
        $db_host = "${{ secrets.DB_HOST }}";
        $db_user = "${{ secrets.DB_USER }}";
        $db_password = "${{ secrets.DB_PASSWORD }}";
        $db_name = "${{ secrets.DB_NAME }}";
        
        // Enable CORS for API requests
        header("Access-Control-Allow-Origin: *");
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
        header("Access-Control-Allow-Headers: Content-Type, Authorization");
        header("Content-Type: application/json");
        
        // If this is a preflight OPTIONS request, return only the headers and exit
        if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {
            http_response_code(200);
            exit();
        }
        
        // Create database connection
        function get_db_connection() {
            global $db_host, $db_user, $db_password, $db_name;
            
            $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
            
            // Check connection
            if ($conn->connect_error) {
                http_response_code(500);
                die(json_encode(["error" => "Database connection failed"]));
            }
            
            // Set character set
            $conn->set_charset("utf8mb4");
            
            return $conn;
        }
        
        // Helper function to send JSON response
        function send_json_response($data, $status_code = 200) {
            http_response_code($status_code);
            echo json_encode($data);
            exit();
        }
        
        // Helper function to handle errors
        function send_error($message, $status_code = 400) {
            http_response_code($status_code);
            echo json_encode(["error" => $message]);
            exit();
        }
        ?>' > api/config.php
      
    - name: Create API .htaccess
      run: |
        echo '# Protect PHP files from direct access except these endpoints
        <FilesMatch "^(properties|db-test|connection-test)\.php$">
            Allow from all
        </FilesMatch>
        
        # Deny direct access to config.php
        <Files "config.php">
            Order deny,allow
            Deny from all
        </Files>
        
        # Security headers
        <IfModule mod_headers.c>
            Header set X-Content-Type-Options "nosniff"
            Header set X-XSS-Protection "1; mode=block"
            Header set X-Frame-Options "SAMEORIGIN"
        </IfModule>' > api/.htaccess
      
    - name: Create API README.md
      run: |
        echo '# API Configuration

        ## Database Credentials
        
        The database credentials are automatically injected from GitHub Secrets during deployment.
        You do not need to manually edit the config.php file.
        
        If you need to update the database credentials:
        
        1. Go to your GitHub repository
        2. Click on Settings → Secrets and variables → Actions
        3. Update the following secrets:
           - DB_HOST (database hostname)
           - DB_USER (database username)
           - DB_PASSWORD (database password)
           - DB_NAME (database name)
        4. Re-run the deployment workflow
        
        ## Security
        
        Your database credentials are securely stored as encrypted GitHub Secrets and are only
        injected during the deployment process. They are not visible in the repository code.' > api/README.md
      
    - name: Copy API files to out directory
      run: |
        mkdir -p out/api
        cp -r api/* out/api/
      
    - name: Prepare production branch
      run: |
        # Save build output to a temporary directory
        mkdir -p /tmp/build-output
        cp -R out/. /tmp/build-output/
        
        # Save .cpanel.yml for later
        cp .cpanel.yml /tmp/cpanel.yml
        
        # Configure Git
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Handle uncommitted changes that would prevent checkout
        git add .
        git reset --hard HEAD
        
        # Fetch all branches
        git fetch origin
        
        # Check if production branch exists
        if git show-ref --verify --quiet refs/remotes/origin/production; then
          echo "Production branch exists, switching to it"
          git checkout production
        else
          echo "Creating new production branch"
          git checkout --orphan production
          git rm -rf --cached .
        fi
        
        # Clean working directory (keep only .git)
        find . -mindepth 1 -maxdepth 1 -not -name ".git" -exec rm -rf {} \;
        
        # Copy build files to root
        cp -R /tmp/build-output/. ./
        
        # Copy .cpanel.yml back
        cp /tmp/cpanel.yml .cpanel.yml
        
        # Stage all files
        git add -A
        
        # Commit changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update production with latest build from main branch"
          
          # Push to production branch
          git push origin production
          
          echo "✅ Production branch updated successfully"
        fi 