name: Deploy to Production Branch

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # Allows manual trigger from GitHub Actions tab

# Add permissions to allow the workflow to commit and push
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Next.js static export
      run: npm run build
      
    - name: Copy .htaccess to build output
      run: |
        if [ -f ".htaccess" ]; then
          cp .htaccess out/
          echo "Copied .htaccess to out directory"
        else
          echo "No .htaccess file found"
        fi
      
    - name: Prepare production branch
      run: |
        # Save build output to a temporary directory
        mkdir -p /tmp/build-output
        cp -R out/. /tmp/build-output/
        
        # Save .cpanel.yml for later
        cp .cpanel.yml /tmp/cpanel.yml
        
        # Configure Git
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Handle uncommitted changes that would prevent checkout
        git add .
        git reset --hard HEAD
        
        # Fetch all branches
        git fetch origin
        
        # Check if production branch exists
        if git show-ref --verify --quiet refs/remotes/origin/production; then
          echo "Production branch exists, switching to it"
          git checkout production
        else
          echo "Creating new production branch"
          git checkout --orphan production
          git rm -rf --cached .
        fi
        
        # Clean working directory (keep only .git)
        find . -mindepth 1 -maxdepth 1 -not -name ".git" -exec rm -rf {} \;
        
        # Copy build files to root
        cp -R /tmp/build-output/. ./
        
        # Copy .cpanel.yml back
        cp /tmp/cpanel.yml .cpanel.yml
        
        # Stage all files
        git add -A
        
        # Commit changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update production with latest build from main branch"
          
          # Push to production branch
          git push origin production
          
          echo "âœ… Production branch updated successfully"
        fi 